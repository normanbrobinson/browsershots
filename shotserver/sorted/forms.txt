
                        FACTORY_NAME_REGEX},
                "Color depth must not be greater than 32 bits per pixel.")
                "Color depth must not be smaller than 1 bit per pixel.")
                "Screen width must not be greater than 1680 pixels.")
                "Screen width must not be smaller than 240 pixels.")
            email=self.cleaned_data['email'],
            password=self.cleaned_data['password'])
            raise forms.ValidationError(
            raise forms.ValidationError("Enter the same password again.")
            raise forms.ValidationError("Name must start with uppercase.")
            raise forms.ValidationError("The password is too simple.")
            raise forms.ValidationError("This username is already taken.")
            raise forms.ValidationError("This username is reserved.")
            raise forms.ValidationError(_("This field is required."))
            raise forms.ValidationError(_("This name is reserved."))
            return
            username=self.cleaned_data['username'],
        """
        Check that the first name starts with an uppercase letter.
        Check that the last name starts with an uppercase letter.
        Check that the password and repeat is the same.
        Check that the password is not too silly.
        Check that the username is sensible and available.
        Check the submitted factory name value.
        Check the submitted hardware value.
        Create a new user with the form data.
        bits_per_pixel = self.cleaned_data['bits_per_pixel']
        error_messages={'invalid': "Factory name must match %s." %
        error_messages={'invalid': "Username must match %s." % USERNAME_REGEX},
        exclude = ('factory')
        exclude = ('user', 'secret_key')
        first_name = self.cleaned_data['first_name']
        hardware = self.cleaned_data['hardware'].strip()
        if 'password' not in self.cleaned_data:
        if User.objects.filter(username=username).count():
        if bits_per_pixel < 1:
        if bits_per_pixel > 32:
        if first_name[0].upper() != first_name[0]:
        if last_name[0].upper() != last_name[0]:
        if len(hardware) == 0:
        if len(name) == 0:
        if name in RESERVED_FACTORY_NAMES:
        if password.isdigit() or password == len(password) * password[0]:
        if repeat != password:
        if username in RESERVED_USERNAMES:
        if width < 240:
        if width > 1680:
        last_name = self.cleaned_data['last_name']
        max_length=Factory._meta.get_field('hardware').max_length,
        max_length=Factory._meta.get_field('name').max_length)
        min_length=2,
        min_length=2, max_length=40)
        model = ColorDepth
        model = Factory
        model = ScreenSize
        name = self.cleaned_data['name'].strip()
        password = self.cleaned_data['password']
        repeat = self.cleaned_data['repeat']
        return "No error."
        return bits_per_pixel
        return first_name
        return hardware
        return last_name
        return name
        return password
        return repeat
        return user
        return username
        return width
        user = User.objects.create_user(
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        user.save()
        username = self.cleaned_data['username']
        widget=forms.PasswordInput)
        widget=forms.TextInput(attrs={'size': '40'}))
        width = self.cleaned_data['width']
    """
    Add supported color depth to a factory.
    Add supported screen size to a factory.
    Create a new screenshot factory.
    Create a new user account.
    Get a simple string for the first error in the form.
    class Meta:
    def clean_bits_per_pixel(self):
    def clean_first_name(self):
    def clean_hardware(self):
    def clean_last_name(self):
    def clean_name(self):
    def clean_password(self):
    def clean_repeat(self):
    def clean_username(self):
    def clean_width(self):
    def save(self):
    email = forms.EmailField()
    error = unicode(form.errors[key][0])
    first_name = forms.CharField(max_length=40)
    hardware = forms.CharField(
    if not form.errors:
    key = form.errors.keys()[0]
    last_name = forms.CharField(max_length=40)
    name = forms.RegexField(regex=FACTORY_NAME_REGEX,
    password = forms.CharField(min_length=6, max_length=40,
    repeat = forms.CharField(max_length=40,
    return "Invalid %s: %s" % (key, error)
    username = forms.RegexField(regex=USERNAME_REGEX,
"""
""".split()
#
# (at your option) any later version.
# Browsershots is distributed in the hope that it will be useful,
# Browsershots is free software: you can redistribute it and/or modify
# Copyright (C) 2008 Johann C. Rocholl <johann@browsershots.org>
# GNU General Public License for more details.
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# You should have received a copy of the GNU General Public License
# along with Browsershots. If not, see <http://www.gnu.org/licenses/>.
# browsershots.org - Test your web design in different browsers
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
FACTORY_NAME_REGEX = r'[a-z][a-z0-9-_]*'
Forms for the accounts app.
Forms for the factories app.
Helper functions for handling forms.
RESERVED_FACTORY_NAMES = """
RESERVED_USERNAMES = """
USERNAME_REGEX = r'[a-z][a-z0-9-_]*'
admin administrator root webmaster www-data
class ColorDepthForm(forms.ModelForm):
class CreateUserForm(forms.Form):
class FactoryForm(forms.ModelForm):
class ScreenSizeForm(forms.ModelForm):
def form_error(form):
from django import forms
from django.contrib.auth.models import User
from django.utils.translation import ugettext as _
from shotserver05.factories.models import Factory, ScreenSize, ColorDepth
localhost server factory shotfactory create
postmaster test testuser testclient staff create
