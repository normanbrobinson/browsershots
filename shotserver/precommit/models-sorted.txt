
            self.browser_name.name, self.major, self.minor)
        ordering = ('bits_per_pixel', )
        ordering = ('date', 'screenshot_count')
        ordering = ('name', )
        ordering = ('width', 'height')
        return '%d.%d' % (self.major, self.minor)
        return '%dx%d' % (self.width, self.height)
        return '%s %s %s.%s' % (self.platform.name,
        return '%s/%s' % (self.name.name, self.version)
        return '/factories/%s/' % self.name
        return self.domain
        return self.hashkey
        return self.message
        return self.name
        return self.url
        return self.website.url
        return str(self.bits_per_pixel)
        unique_together = ('factory', 'user_agent')
        verbose_name_plural = 'factories'
    attempt = models.ForeignKey(Attempt)
    bits_per_pixel = models.PositiveIntegerField()
    browser_name = models.ForeignKey(BrowserName)
    bytes = models.PositiveIntegerField()
    class Meta:
    code = models.PositiveIntegerField()
    codename = models.CharField(max_length=20, blank=True)
    created = models.DateTimeField(auto_now_add=True)
    date = models.DateField()
    def __unicode__(self):
    def get_absolute_url(self):
    def get_short_version(self):
    domain = models.CharField(max_length=200)
    domain = models.ForeignKey(Domain)
    engine = models.ForeignKey(Engine)
    engine_version = models.CharField(max_length=20)
    error_count = models.PositiveIntegerField()
    factory = models.ForeignKey(Factory)
    flash = models.CharField(max_length=20, blank=True)
    group = models.ForeignKey(JobGroup)
    hardware = models.CharField(max_length=200)
    hashkey = models.SlugField(max_length=32, unique=True)
    height = models.PositiveIntegerField()
    java = models.CharField(max_length=20, blank=True)
    javascript = models.CharField(max_length=20, blank=True)
    job = models.ForeignKey(Job)
    last_error = models.DateTimeField(editable=False, null=True)
    last_poll = models.DateTimeField(editable=False, null=True)
    last_upload = models.DateTimeField(editable=False, null=True)
    major = models.PositiveIntegerField()
    message = models.CharField(max_length=400)
    minor = models.PositiveIntegerField()
    name = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=40)
    name = models.ForeignKey(BrowserName)
    name = models.SlugField(max_length=20, unique=True)
    occurred = models.DateTimeField(auto_now_add=True)
    operating_system = models.ForeignKey(OperatingSystem)
    platform = models.ForeignKey(Platform)
    priority = models.PositiveIntegerField(default=0)
    problem_count = models.PositiveIntegerField()
    reported = models.DateTimeField(auto_now_add=True)
    reporter = models.ForeignKey(User)
    screenshot = models.ForeignKey(Screenshot)
    screenshot_count = models.PositiveIntegerField()
    secret_key = models.CharField(max_length=512, default=random_secret_key)
    slug = models.SlugField(max_length=20, unique=True)
    started = models.DateTimeField(auto_now_add=True)
    submitted = models.DateTimeField(auto_now_add=True)
    update_fields = granular_update.update_fields
    uploaded = models.DateTimeField(auto_now_add=True)
    url = models.CharField(max_length=400)
    user = models.ForeignKey(User)
    user = models.ForeignKey(User, blank=True, null=True)
    user_agent = models.CharField(max_length=200)
    version = models.CharField(max_length=20)
    version = models.CharField(max_length=20, blank=True)
    website = models.ForeignKey(Website)
    width = models.PositiveIntegerField()
class Attempt(models.Model):
class Browser(models.Model):
class BrowserName(models.Model):
class ColorDepth(models.Model):
class Domain(models.Model):
class Engine(models.Model):
class Error(models.Model):
class Factory(models.Model):
class FactoryStatistics(models.Model):
class Job(models.Model):
class JobGroup(models.Model):
class OperatingSystem(models.Model):
class Platform(models.Model):
class Problem(models.Model):
class ScreenSize(models.Model):
class Screenshot(models.Model):
class Sponsor(models.Model):
class Website(models.Model):
from django.contrib.auth.models import User
from django.db import models
from shotserver05.browsers.models import BrowserName
from shotserver05.factories.models import Factory
from shotserver05.factories.utils import random_secret_key
from shotserver05.jobs.models import Job
from shotserver05.platforms.models import OperatingSystem
from shotserver05.platforms.models import Platform
from shotserver05.utils import granular_update
from shotserver05.websites.models import Website
