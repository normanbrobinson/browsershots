=================
XML-RPC interface
=================

factories.createFactory(string, string, string, string, string, string) => string
=================================================================================

Create a new screenshot factory.

Arguments:
~~~~~~~~~~
* username string (e.g. joe)
* factory_name string (lowercase, use hostname if possible)
* operating_system string (see platforms.listOperatingSystems)
* hardware string (e.g. MacBook, Intel Core Duo, 2 GHz, 2 GB)
* timestamp string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* md5_hash string (see users.testAuth for details)

Return value:
~~~~~~~~~~~~~
* status string (OK)

factories.factoryDetails(string) => dict
========================================

Get details for the specified screenshot factory.

Arguments:
~~~~~~~~~~
* factory_name string (lowercase)

Return value:
~~~~~~~~~~~~~
* details dict

The result dict will contain the following entries:

* name string (lowercase)
* operating_system string (see platforms.listOperatingSystems)
* hardware string (e.g. MacBook, Intel Core Duo, 2 GHz, 2 GB)
* last_poll string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* last_upload string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* last_error string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)

factories.listActiveFactories() => list
=======================================

List all screenshot factories that are currently active.

Return value:
~~~~~~~~~~~~~
* factories list

factories.testAuth(string, int, string, string, string) => string
=================================================================

Test factory authentication with MD5 hash. To compute the hash,
concatenate the string values of all the other arguments and the
secret key for the factory, then get the MD5 hash as 32 lowercase
hexadecimal characters. If the factory name is 'factory' and the
secret key is 'secret', you might get the following MD5 hash:

>>> md5('123hello2008-08-08T23:56:14Zfactorysecret').hexdigest()
'5afba7f48c2df4b85e3cac482df48010'

Arguments:
~~~~~~~~~~
* factory_name string (lowercase)
* dummy_number int (e.g. 123)
* dummy_text string (e.g. hello)
* timestamp string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* md5_hash string (see below for details)

Return value:
~~~~~~~~~~~~~
* status string (OK)

factories.updateFactory(string, string, string, string, string, string) => string
=================================================================================

Update factory information.

Arguments:
~~~~~~~~~~
* username string (e.g. joe)
* factory_name string (lowercase)
* operating_system string (see platforms.listOperatingSystems)
* hardware string (e.g. MacBook, Intel Core Duo, 2 GHz, 2 GB)
* timestamp string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* md5_hash string (see users.testAuth for details)

Return value:
~~~~~~~~~~~~~
* status string (OK)

platforms.listOperatingSystems() => list
========================================

List all available operating systems.

Return value:
~~~~~~~~~~~~~
* slugs list (a slug for each operating system)

platforms.operatingSystemDetails(string) => dict
================================================

Get details for the specified operating system.

Arguments:
~~~~~~~~~~
* operating_system string (see platforms.listOperatingSystems)

Return value:
~~~~~~~~~~~~~
* details dict

The result dict will contain the following entries:

* platform string
* name string
* version string
* codename string

system.listMethods() => list
============================

Get a list of the methods supported by the server.

Return value:
~~~~~~~~~~~~~
* method_names list (names of all supported methods)

system.methodHelp(string) => string
===================================

Get documentation for the specified method.

Arguments:
~~~~~~~~~~
* method_name string (e.g. system.listMethods)

Return value:
~~~~~~~~~~~~~
* help string (method documentation)

system.methodSignature(string) => list
======================================

List the possible signatures of the specified method.

Arguments:
~~~~~~~~~~
* method_name string (e.g. system.listMethods)

Return value:
~~~~~~~~~~~~~
* signatures list (usually only one signature)

Each signature is a list of type name strings, first the type of
the return value, then the types of the arguments.

users.testAuth(string, int, string, string, string) => string
=============================================================

Test user authentication with MD5 hash. To compute the hash,
concatenate the string values of all the other arguments and the
pre-hashed user password, then get the MD5 hash as 32 lowercase
hexadecimal characters. If the username is 'joe' and the
pre-hashed password is 'sha1$e3$4d07f85', you might get the
following MD5 hash:

>>> md5('123hello2008-08-08T23:56:14Zjoesha1$e3$4d07f85').hexdigest()
'2eb594e041eeb418e86ef0289328ed1c'

Arguments:
~~~~~~~~~~
* username string (e.g. joe)
* dummy_number int (e.g. 123)
* dummy_text string (e.g. hello)
* timestamp string (UTC, ISO 8601: YYYY-MM-DDThh:mm:ssZ)
* md5_hash string (see below for details)

Return value:
~~~~~~~~~~~~~
* status string (OK)

