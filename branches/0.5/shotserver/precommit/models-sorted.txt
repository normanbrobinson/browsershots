
                                  default=random_secret_key)
                                default=random_hash_key)
                "Color depth must not be greater than 32 bits per pixel.")
                "Color depth must not be smaller than 1 bit per pixel.")
                "Screen width must not be greater than 1680 pixels.")
                "Screen width must not be smaller than 240 pixels.")
            parts.append('(%s)' % self.codename)
            parts.append(self.version)
            raise forms.ValidationError(
            self.browser_name.name, self.major, self.minor)
        """
        Get short browser version.
        Get the URL for the factory details page.
        if bits_per_pixel < 1:
        if bits_per_pixel > 32:
        if self.codename:
        if self.version:
        if width < 240:
        if width > 1680:
        ordering = ('bits_per_pixel', )
        ordering = ('date', 'screenshot_count')
        ordering = ('name', )
        ordering = ('width', 'height')
        parts = [self.name]
        return ' '.join(parts)
        return '%d.%d' % (self.major, self.minor)
        return '%dx%d' % (self.width, self.height)
        return '%s %s %s.%s' % (self.platform.name,
        return '%s/%s' % (self.name.name, self.version)
        return '/factories/%s/' % self.name
        return True
        return self.domain
        return self.hashkey
        return self.message
        return self.name
        return self.url
        return self.website.url
        return str(self.bits_per_pixel)
        unique_together = ('factory', 'bits_per_pixel')
        unique_together = ('factory', 'user_agent')
        unique_together = ('factory', 'width', 'height')
        verbose_name_plural = 'factories'
    """
    @staticmethod
    Common information about jobs that were submitted together.
    Daily statistics for each factory.
    SECRET_KEY_DEFAULT_LENGTH, random_secret_key
    Screenshot factory: a remote machine that makes website screenshots.
    Screenshot request for a specific browser.
    Specific browser version installed on a screenshot factory.
    Supported browser engine, e.g. Gecko, AppleWebKit, Opera.
    Supported browser name, e.g. Firefox, Safari, Opera.
    Supported display color depths for each factory.
    Supported screen resolution for each factory.
    attempt = models.ForeignKey(Attempt)
    bits_per_pixel = models.IntegerField()
    bpp_max = models.IntegerField(blank=True, null=True)
    bpp_min = models.IntegerField(blank=True, null=True)
    browser_name = models.ForeignKey(BrowserName)
    bytes = models.IntegerField()
    class Meta:
    code = models.IntegerField()
    codename = models.CharField(max_length=20, blank=True)
    created = models.DateTimeField(auto_now_add=True)
    date = models.DateField()
    def __unicode__(self):
    def get_absolute_url(self):
    def get_short_version(self):
    def validate(bits_per_pixel):
    def validate(width, height):
    domain = models.CharField(max_length=200)
    domain = models.ForeignKey(Domain)
    engine = models.ForeignKey(Engine)
    engine_version = models.CharField(max_length=20)
    error_count = models.IntegerField()
    factory = models.ForeignKey(Factory)
    flash = models.CharField(max_length=20, blank=True)
    group = models.ForeignKey(JobGroup)
    hardware = models.CharField(max_length=200)
    hash_key = models.SlugField(max_length=32, unique=True,
    hashkey = models.SlugField(max_length=32, unique=True)
    height = models.IntegerField()
    java = models.CharField(max_length=20, blank=True)
    javascript = models.CharField(max_length=20, blank=True)
    job = models.ForeignKey(Job)
    last_error = models.DateTimeField(editable=False, null=True)
    last_poll = models.DateTimeField(editable=False, null=True)
    last_upload = models.DateTimeField(editable=False, null=True)
    major = models.IntegerField()
    message = models.CharField(max_length=400)
    minor = models.IntegerField()
    name = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=40)
    name = models.ForeignKey(BrowserName)
    name = models.SlugField(max_length=20, unique=True)
    occurred = models.DateTimeField(auto_now_add=True)
    operating_system = models.ForeignKey(OperatingSystem)
    platform = models.ForeignKey(Platform)
    priority = models.IntegerField(default=0)
    problem_count = models.IntegerField()
    reported = models.DateTimeField(auto_now_add=True)
    reporter = models.ForeignKey(User)
    screenshot = models.ForeignKey(Screenshot)
    screenshot_count = models.IntegerField()
    secret_key = models.CharField(max_length=SECRET_KEY_DEFAULT_LENGTH,
    slug = models.SlugField(max_length=20, unique=True)
    started = models.DateTimeField(auto_now_add=True)
    submitted = models.DateTimeField(auto_now_add=True)
    update_fields = granular_update.update_fields
    uploaded = models.DateTimeField(auto_now_add=True)
    url = models.CharField(max_length=400)
    user = models.ForeignKey(User)
    user = models.ForeignKey(User, blank=True, null=True)
    user_agent = models.CharField(max_length=200)
    version = models.CharField(max_length=20)
    version = models.CharField(max_length=20, blank=True)
    website = models.ForeignKey(Website)
    width = models.IntegerField()
    width_max = models.IntegerField(blank=True, null=True)
    width_min = models.IntegerField(blank=True, null=True)
"""
#
# (at your option) any later version.
# Browsershots is distributed in the hope that it will be useful,
# Browsershots is free software: you can redistribute it and/or modify
# Copyright (C) 2008 Johann C. Rocholl <johann@browsershots.org>
# GNU General Public License for more details.
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# You should have received a copy of the GNU General Public License
# along with Browsershots. If not, see <http://www.gnu.org/licenses/>.
# browsershots.org - Test your web design in different browsers
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
Models for the accounts app.
Models for the browsers app.
Models for the factories app.
Models for the jobs app.
Models for the platforms app.
Models for the screenshots app.
Models for the sponsors app.
Models for the system app.
Models for the websites app.
Models for the xmlrpc app.
See django.contrib.auth.models for the User model.
__author__ = "$Author: johann $"
__date__ = "$Date: 2008-09-10 09:41:49 -0700 (Wed, 10 Sep 2008) $"
__date__ = "$Date: 2008-09-10 10:00:10 -0700 (Wed, 10 Sep 2008) $"
__date__ = "$Date: 2008-09-10 10:01:27 -0700 (Wed, 10 Sep 2008) $"
__date__ = "$Date: 2008-09-12 17:55:56 -0700 (Fri, 12 Sep 2008) $"
__date__ = "$Date: 2008-09-12 22:27:14 -0700 (Fri, 12 Sep 2008) $"
__date__ = "$Date: 2008-09-13 13:38:18 -0700 (Sat, 13 Sep 2008) $"
__date__ = "$Date: 2008-09-15 17:36:02 -0700 (Mon, 15 Sep 2008) $"
__date__ = "$Date: 2008-09-16 14:59:20 -0700 (Tue, 16 Sep 2008) $"
__revision__ = "$Rev: 3068 $"
__revision__ = "$Rev: 3070 $"
__revision__ = "$Rev: 3071 $"
__revision__ = "$Rev: 3086 $"
__revision__ = "$Rev: 3087 $"
__revision__ = "$Rev: 3093 $"
__revision__ = "$Rev: 3108 $"
__revision__ = "$Rev: 3114 $"
class Attempt(models.Model):
class Browser(models.Model):
class BrowserName(models.Model):
class ColorDepth(models.Model):
class Domain(models.Model):
class Engine(models.Model):
class Error(models.Model):
class Factory(models.Model):
class FactoryStatistics(models.Model):
class Job(models.Model):
class JobGroup(models.Model):
class OperatingSystem(models.Model):
class Platform(models.Model):
class Problem(models.Model):
class ScreenSize(models.Model):
class Screenshot(models.Model):
class Sponsor(models.Model):
class Website(models.Model):
from django import forms
from django.contrib.auth.models import User
from django.db import models
from shotserver05.browsers.models import BrowserName
from shotserver05.factories.models import Factory
from shotserver05.jobs.models import Job
from shotserver05.platforms.models import OperatingSystem
from shotserver05.platforms.models import Platform
from shotserver05.utils import granular_update
from shotserver05.utils.random_keys import \
from shotserver05.utils.random_keys import random_hash_key
from shotserver05.websites.models import Website
